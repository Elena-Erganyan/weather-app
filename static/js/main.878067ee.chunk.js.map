{"version":3,"sources":["assets/images/preloader.svg","serviceWorker.js","api/api.js","redux/weather-reducer.js","redux/store.js","components/Modal/HourlyWeather/HourlyCard/HourlyCard.jsx","components/Modal/HourlyWeather/HourlyWeather.jsx","components/Modal/Modal.jsx","components/Search/Search.jsx","components/Search/SearchContainer.jsx","components/common/Preloader/Preloader.jsx","components/Weather/CurrentWeather/CurrentWeather.jsx","components/Weather/WeekWeather/Card/Card.jsx","components/Weather/WeekWeather/WeekWeather.jsx","components/Weather/Weather.jsx","components/Weather/WeatherContainer.jsx","App.js","AppContainer.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","APIkey","baseUrl","weatherAPI","city","fetch","coord","lat","lon","initialState","error","currentWeatherData","weekWeatherData","hourlyWeatherData","isModalActive","isFetching","toggleIsModalActive","type","toggleIsFetching","toggleError","setCity","setCurrentWeatherData","setWeekWeatherData","setHourlyWeatherData","weatherReducer","state","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","HourlyCard","props","tempC","Math","round","temp","date","Date","toLocaleString","slice","time","toLocaleTimeString","className","src","icon","alt","HourlyWeather","hourlyWeather","map","item","index","key","dt","weather","Modal","document","addEventListener","evt","keyCode","onClick","Search","onChange","setState","currentTarget","value","requestData","requestWeatherData","onKeyDown","this","React","Component","SearchContainer","connect","dispatch","a","responseCurrent","responseWeek","status","json","list","filter","reading","dt_txt","includes","dailyWeatherData","Preloader","preloader","CurrentWeather","weekday","year","month","day","main","feelTempC","feels_like","pressure","sunrise","sys","sunset","name","country","description","humidity","wind","speed","requestHourlyWeatherData","Card","WeekWeather","cards","Weather","WeatherContainer","response","weatherData","hourly","alert","statusText","App","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.878067ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/preloader.c9fef649.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const APIkey = \"51dc4b73f6265442f762bd5f8d70d15b\";\r\nconst baseUrl = \"https://api.openweathermap.org/data/2.5/\";\r\n\r\nexport const weatherAPI = {\r\n    getCurrentWeather(city) {\r\n        return fetch(`${baseUrl}weather?q=${city}&appid=${APIkey}`);\r\n    },\r\n    getWeekWeather(city) {\r\n        return fetch(`${baseUrl}forecast?q=${city}&appid=${APIkey}`);\r\n    },\r\n    getHourlyWeather(coord) {\r\n        return fetch(`${baseUrl}onecall?lat=${coord.lat}&lon=${coord.lon}&exclude=current,minutely,daily,alerts&appid=${APIkey}`);\r\n    }\r\n};","import { weatherAPI } from \"../api/api\";\r\n\r\nconst initialState = {\r\n    city: null,\r\n    error: false,\r\n    currentWeatherData: {},\r\n    weekWeatherData: [],\r\n    hourlyWeatherData: [],\r\n    isModalActive: false,\r\n    isFetching: false\r\n};\r\n\r\nconst SET_CITY = \"SET_CITY\";\r\nconst SET_CURRENT_WEATHER_DATA = \"SET_CURRENT_WEATHER_DATA\";\r\nconst SET_WEEK_WEATHER_DATA = \"SET_WEEK_WEATHER_DATA\";\r\nconst SET_HOURLY_WEATHER_DATA = \"SET_HOURLY_WEATHER_DATA\";\r\nconst TOGGLE_IS_MODAL_ACTIVE = \"TOGGLE_IS_MODAL_ACTIVE\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_ERROR = \"TOGGLE_ERROR\";\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SET_CITY:\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            };\r\n        case SET_CURRENT_WEATHER_DATA:\r\n            return {\r\n                ...state,\r\n                currentWeatherData: { ...action.currentWeatherData }\r\n            };\r\n        case SET_WEEK_WEATHER_DATA:\r\n            return {\r\n                ...state,\r\n                weekWeatherData: [...action.weekWeatherData],\r\n            };\r\n        case SET_HOURLY_WEATHER_DATA:\r\n            return {\r\n                ...state,\r\n                hourlyWeatherData: [...action.hourlyWeatherData],\r\n            };\r\n        case TOGGLE_IS_MODAL_ACTIVE:\r\n            return {\r\n                ...state,\r\n                isModalActive: action.isModalActive\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        case TOGGLE_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const toggleIsModalActive = isModalActive => ({ type: TOGGLE_IS_MODAL_ACTIVE, isModalActive });\r\n\r\nexport const toggleIsFetching = isFetching => ({ type: TOGGLE_IS_FETCHING, isFetching });\r\n\r\nexport const toggleError = error => ({ type: TOGGLE_ERROR, error });\r\n\r\nexport const setCity = city => ({ type: SET_CITY, city });\r\n\r\nexport const setCurrentWeatherData = currentWeatherData => ({ type: SET_CURRENT_WEATHER_DATA, currentWeatherData });\r\n\r\nexport const setWeekWeatherData = weekWeatherData => ({ type: SET_WEEK_WEATHER_DATA, weekWeatherData });\r\n\r\nexport const setHourlyWeatherData = hourlyWeatherData => ({ type: SET_HOURLY_WEATHER_DATA, hourlyWeatherData });\r\n\r\nexport const requestWeatherData = city => {\r\n\r\n    return async dispatch => {\r\n\r\n        dispatch(toggleIsFetching(true));\r\n\r\n        const responseCurrent = await weatherAPI.getCurrentWeather(city);\r\n        const responseWeek = await weatherAPI.getWeekWeather(city);\r\n\r\n        if (responseCurrent.status === 200 && responseWeek.status === 200) {\r\n\r\n            const currentWeatherData = await responseCurrent.json();\r\n            dispatch(setCurrentWeatherData(currentWeatherData));\r\n\r\n            const weekWeatherData = await responseWeek.json();\r\n            const dailyWeatherData = await weekWeatherData.list.filter(reading => reading.dt_txt.includes(\"12:00:00\"));\r\n            dispatch(setWeekWeatherData(dailyWeatherData));\r\n            dispatch(toggleError(false));\r\n\r\n        } else {\r\n            dispatch(setCity(null));\r\n            dispatch(setCurrentWeatherData({}));\r\n            dispatch(setWeekWeatherData([]));\r\n            dispatch(setHourlyWeatherData([]));\r\n            dispatch(toggleError(true));\r\n        }\r\n\r\n        dispatch(toggleIsFetching(false));\r\n    };\r\n};\r\n\r\nexport const requestHourlyWeatherData = coord => {\r\n\r\n    return async dispatch => {\r\n\r\n        dispatch(toggleIsModalActive(true));\r\n\r\n        const response = await weatherAPI.getHourlyWeather(coord);\r\n\r\n        if (response.status === 200) {\r\n            const weatherData = await response.json();\r\n            dispatch(setHourlyWeatherData(weatherData.hourly));\r\n\r\n        } else {\r\n            alert(`Some error ocurred: ${response.status}: ${response.statusText}`);\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport default weatherReducer;","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport weatherReducer from \"./weather-reducer\";\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(weatherReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nexport default store;","import React from \"react\";\r\nimport \"./HourlyCard.scss\";\r\n\r\nconst HourlyCard = (props) => {\r\n\r\n    const tempC = Math.round(props.temp - 273.15);\r\n    const date = new Date(props.date * 1000).toLocaleString().slice(0, 5);\r\n    const time = new Date(props.date * 1000).toLocaleTimeString().slice(0, 5);\r\n\r\n    return (\r\n        <div className=\"card hourlyCard\">\r\n            <div className=\"card__date\">{date}</div>\r\n            <div className=\"card__time\">{time}</div>\r\n            <div className=\"card__icon\">\r\n                <img src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt=\"icon\" />\r\n            </div>\r\n            <div className=\"card__temp\">{tempC}&deg;C</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HourlyCard;","import React from \"react\";\r\nimport HourlyCard from \"./HourlyCard/HourlyCard\";\r\nimport \"./HourlyWeather.scss\"\r\n\r\n\r\nconst HourlyWeather = (props) => {\r\n\r\n    const hourlyWeather = props.hourlyWeatherData.map((item, index) => {\r\n        return <HourlyCard key={index} date={item.dt} temp={item.temp} icon={item.weather[0].icon} />\r\n    });\r\n\r\n    return (\r\n        <div className=\"hourlyWeather\">\r\n            {hourlyWeather}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HourlyWeather;","import React from \"react\";\r\nimport HourlyWeather from \"./HourlyWeather/HourlyWeather\";\r\nimport \"./Modal.scss\";\r\n\r\n\r\nconst Modal = (props) => {\r\n\r\n    const onCloseClick = () => {\r\n        props.toggleIsModalActive(false);\r\n    }\r\n\r\n    const onKeyDown = (evt) => {\r\n        if (evt.keyCode === 27) {\r\n            props.toggleIsModalActive(false);\r\n        }\r\n    }\r\n\r\n    document.addEventListener(\"keydown\", onKeyDown);\r\n\r\n    return <div className=\"overlay\">\r\n        <div className=\"modal\">\r\n            <div className=\"modal__wrapper\">\r\n                <button className=\"closeBtn\" onClick={onCloseClick}>Close</button>\r\n                <div className=\"modal__weather\">\r\n                    <HourlyWeather hourlyWeatherData={props.hourlyWeatherData}\r\n                        toggleIsModalActive={props.toggleIsModalActive} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default Modal;","import React from \"react\";\r\nimport \"./Search.scss\";\r\n\r\n\r\nclass Search extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            city: \"\"\r\n        };\r\n    }\r\n\r\n    onChange = (evt) => {\r\n        this.setState({ city: evt.currentTarget.value });\r\n    }\r\n\r\n    requestData = () => {\r\n        this.props.setCity(this.state.city);\r\n        this.props.requestWeatherData(this.state.city);\r\n    }\r\n\r\n    onClick = () => {\r\n        this.requestData();\r\n    }\r\n\r\n    onKeyDown = (evt) => {\r\n        if (evt.keyCode === 13) {\r\n            this.requestData();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search\">\r\n                <input className=\"search__field\" type=\"text\" onChange={this.onChange} onKeyDown={this.onKeyDown} />\r\n                <button className=\"btn search__btn\" onClick={this.onClick}>Set city</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { requestWeatherData, setCity } from \"../../redux/weather-reducer\";\r\nimport Search from \"./Search\";\r\n\r\n\r\nclass SearchContainer extends React.Component {\r\n\r\n    render() {\r\n        return <Search setCity={this.props.setCity}\r\n            requestWeatherData={this.props.requestWeatherData} />\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setCity: (city) => {\r\n            dispatch(setCity(city));\r\n        },\r\n        requestWeatherData: (city) => {\r\n            dispatch(requestWeatherData(city));\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchContainer);","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\"\r\n\r\n\r\nconst Preloader = () => {\r\n    return <div className=\"preloader\">\r\n        <img src={preloader} alt=\"Loading...\" />\r\n    </div>\r\n};\r\n\r\nexport default Preloader;","import React from \"react\";\r\nimport \"./CurrentWeather.scss\";\r\n\r\n\r\nconst CurrentWeather = (props) => {\r\n\r\n    const options = { weekday: \"long\", year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    const date = new Date().toLocaleString('en-US', options);\r\n\r\n    const tempC = Math.round(props.currentWeatherData.main.temp - 273.15);\r\n    const feelTempC = Math.round(props.currentWeatherData.main.feels_like - 273.15);\r\n    const pressure = Math.round(props.currentWeatherData.main.pressure / 1.333);\r\n    const sunrise = new Date(props.currentWeatherData.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\r\n    const sunset = new Date(props.currentWeatherData.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\r\n\r\n    const onClick = () => {\r\n        props.requestHourlyWeatherData(props.currentWeatherData.coord);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"currentWeather\">\r\n                <div className=\"currentWeather__mainParameters\">\r\n                    <div className=\"currentWeather__city\">{props.currentWeatherData.name}, {props.currentWeatherData.sys.country}</div>\r\n                    <div className=\"currentWeather__date\">{date}</div>\r\n                    <div className=\"currentWeather__icon\">\r\n                        <img src={`http://openweathermap.org/img/wn/${props.currentWeatherData.weather[0].icon}@2x.png`} alt=\"weatherIcon\" />\r\n                    </div>\r\n                    <div className=\"currentWeather__temp\">{tempC}&deg;C</div>\r\n                    <div className=\"currentWeather__main\">{props.currentWeatherData.weather[0].description}</div>\r\n                </div>\r\n                <div className=\"currentWeather__otherParameters\">\r\n                    <div className=\"currentWeather__feelTemp\"><span className=\"parameterName\">Real feel</span><span className=\"parameterValue\">{feelTempC}&deg;C</span></div>\r\n                    <div className=\"currentWeather__pressure\"><span className=\"parameterName\">Pressure</span><span className=\"parameterValue\">{pressure} mmHg</span></div>\r\n                    <div className=\"currentWeather__humidity\"><span className=\"parameterName\">Humidity</span><span className=\"parameterValue\">{props.currentWeatherData.main.humidity}&#37;</span></div>\r\n                    <div className=\"currentWeather__wind\"><span className=\"parameterName\">Wind</span><span className=\"parameterValue\">{props.currentWeatherData.wind.speed}mph</span></div>\r\n                    <div className=\"currentWeather__sunrise\"><span className=\"parameterName\">Sunrise</span><span className=\"parameterValue\">{sunrise}</span></div>\r\n                    <div className=\"currentWeather__sunset\"><span className=\"parameterName\">Sunset</span><span className=\"parameterValue\">{sunset}</span></div>\r\n                </div>\r\n            </div>\r\n            <button className=\"currentWeather__btn btn\" onClick={onClick}>See 48 hours forecast</button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CurrentWeather;","import React from \"react\";\r\nimport \"./Card.scss\";\r\n\r\nconst Card = (props) => {\r\n\r\n    const tempC = Math.round(props.temp - 273.15);\r\n    const date = new Date(props.date * 1000).toLocaleString().slice(0, 5);\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card__date\">{date}</div>\r\n            <div className=\"card__icon\">\r\n                <img src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt=\"icon\" />\r\n            </div>\r\n            <div className=\"card__temp\">{tempC}&deg;C</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card/Card\";\r\nimport \"./WeekWeather.scss\";\r\n\r\n\r\nconst WeekWeather = (props) => {\r\n\r\n    const cards = props.weekWeatherData.map((item, index) => {\r\n        return <Card key={index} date={item.dt}\r\n            temp={item.main.temp} icon={item.weather[0].icon} />\r\n    });\r\n\r\n    return (\r\n        <div className=\"weekWeather\">\r\n            {cards}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeekWeather;","import React from \"react\";\r\nimport CurrentWeather from \"./CurrentWeather/CurrentWeather\";\r\nimport WeekWeather from \"./WeekWeather/WeekWeather\";\r\n\r\n\r\nconst Weather = (props) => {\r\n    return <>\r\n        <CurrentWeather currentWeatherData={props.currentWeatherData}\r\n            requestHourlyWeatherData={props.requestHourlyWeatherData} />\r\n        <WeekWeather weekWeatherData={props.weekWeatherData} />\r\n    </>\r\n};\r\n\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { requestHourlyWeatherData } from \"../../redux/weather-reducer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport Weather from \"./Weather\";\r\n\r\n\r\nclass WeatherContainer extends React.Component {\r\n\r\n    render() {\r\n        if (this.props.isFetching) return <Preloader />\r\n        return <Weather currentWeatherData={this.props.currentWeatherData}\r\n            weekWeatherData={this.props.weekWeatherData}\r\n            requestHourlyWeatherData={this.props.requestHourlyWeatherData} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isFetching: state.isFetching,\r\n        currentWeatherData: state.currentWeatherData,\r\n        weekWeatherData: state.weekWeatherData\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        requestHourlyWeatherData: (coord) => {\r\n            dispatch(requestHourlyWeatherData(coord));\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherContainer);\r\n","import React from 'react';\nimport './App.scss';\nimport Modal from './components/Modal/Modal';\nimport SearchContainer from './components/Search/SearchContainer';\nimport WeatherContainer from './components/Weather/WeatherContainer';\n\n\nconst App = (props) => {\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">Weather App</h1>\n      <SearchContainer />\n      {props.city && !props.error && <WeatherContainer />}\n      {props.error && <div className=\"app__error\">Sorry, the city was not found</div>}\n      { props.isModalActive &&\n        <Modal hourlyWeatherData={props.hourlyWeatherData}\n          toggleIsModalActive={props.toggleIsModalActive} />}\n    </div >\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport App from './App';\r\nimport { toggleIsModalActive } from './redux/weather-reducer';\r\n\r\n\r\nconst AppContainer = (props) => {\r\n    return <App city={props.city} error={props.error}\r\n        hourlyWeatherData={props.hourlyWeatherData} isModalActive={props.isModalActive}\r\n        toggleIsModalActive={props.toggleIsModalActive} />\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        city: state.city,\r\n        error: state.error,\r\n        hourlyWeatherData: state.hourlyWeatherData,\r\n        isModalActive: state.isModalActive\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleIsModalActive: (isModalActive) => {\r\n            dispatch(toggleIsModalActive(isModalActive))\r\n        }\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport AppContainer from './AppContainer.js';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}